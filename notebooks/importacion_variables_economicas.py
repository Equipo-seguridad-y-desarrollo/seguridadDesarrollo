# -*- coding: utf-8 -*-
"""importacion_variables_economicas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yw6w-A_kHeGTaOIQ4ZsDJl8UKNVLUIL0
"""

import requests
import pandas as pd
import matplotlib.pyplot as plt
import logging
from datetime import datetime
from pathlib import Path

estados_ids = {
    1: 'Aguascalientes', 2: 'Baja California', 3: 'Baja California Sur',
    4: 'Campeche', 5: 'Coahuila de Zaragoza', 6: 'Colima',
    7: 'Chiapas', 8: 'Chihuahua', 9: 'Ciudad de México',
    10: 'Durango', 11: 'Guanajuato', 12: 'Guerrero',
    13: 'Hidalgo', 14: 'Jalisco', 15: 'México',
    16: 'Michoacán de Ocampo', 17: 'Morelos', 18: 'Nayarit',
    19: 'Nuevo León', 20: 'Oaxaca', 21: 'Puebla',
    22: 'Querétaro', 23: 'Quintana Roo', 24: 'San Luis Potosí',
    25: 'Sinaloa', 26: 'Sonora', 27: 'Tabasco',
    28: 'Tamaulipas', 29: 'Tlaxcala', 30: 'Veracruz de Ignacio de la Llave',
    31: 'Yucatán', 32: 'Zacatecas'
}

# Lista para almacenar los DataFrames de cada estado
lista_df_ied = []

print("Iniciando la extraccion de datos crudos de IED por estado...")

# Loop a traves de cada estado para obtener los datos
for id_estado, nombre_estado in estados_ids.items():
    url = (f"http://www.economia.gob.mx/datamexico/api/data?State={id_estado}"
           "&cube=fdi_2_state_investment&drilldowns=Quarter,State&locale=es"
           "&measures=Investment&parents=false")
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json().get("data", [])
        if data:
            lista_df_ied.append(pd.DataFrame(data))
    else:
        print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Codigo: {response.status_code}")

# Concatenar todos los DataFrames
df_ied_raw = pd.concat(lista_df_ied, ignore_index=True)

# Mostrar las primeras filas del DataFrame con los datos crudos
print("\n--- Datos Crudos de Inversion Extranjera Directa por Estado (Primeras 5 filas) ---")
print(df_ied_raw.head())

# Crear el directorio data/raw si no existe
import os
os.makedirs('data/raw', exist_ok=True)

# Guardar el DataFrame en un archivo CSV
df_ied_raw.to_csv('data/raw/ied_raw.csv', index=False)

print("\nDatos de IED guardados en 'data/raw/ied_raw.csv'")

# Lista para almacenar los DataFrames de cada estado
lista_df_salario = []

print("Iniciando la extraccion de datos de salario mensual por estado...")

# Loop a traves de cada estado para obtener los datos
for id_estado, nombre_estado in estados_ids.items():
    # Construir la URL de la API para el estado actual
    url = (f"http://www.economia.gob.mx/datamexico/api/data?State={id_estado}"
           "&Population+Classification=1&cube=inegi_enoe&drilldowns=State,Quarter"
           "&measures=Monthly+Wage,Workforce&locale=es&parents=false")

    # Realizar la solicitud GET a la API
    response = requests.get(url)

    # Verificar si la solicitud fue exitosa
    if response.status_code == 200:
        data = response.json().get("data", [])

        # Procesar solo si se recibieron datos
        if data:
            # Crear un DataFrame temporal y anadirlo a la lista
            lista_df_salario.append(pd.DataFrame(data))
        else:
            print(f"Advertencia: No se encontraron datos para {nombre_estado} (ID: {id_estado})")
    else:
        # Informar si hubo un error en la solicitud
        print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Codigo: {response.status_code}")

# Concatenar todos los DataFrames de la lista en uno solo
df_salario_raw = pd.concat(lista_df_salario, ignore_index=True)

# Mostrar las primeras filas del DataFrame con los datos crudos
print("\n--- Datos Crudos de Salario Mensual por Estado (Primeras 5 filas) ---")
print(df_salario_raw.head())

# Crear el directorio data/raw si no existe
import os
os.makedirs('data/raw', exist_ok=True)

# Guardar el DataFrame en un archivo CSV
df_salario_raw.to_csv('data/raw/salario_raw.csv', index=False)

print("\nDatos de Salario guardados en 'data/raw/salario_raw.csv'")

# Lista para almacenar los DataFrames de cada estado
lista_df_pea = []

print("Iniciando la extraccion de datos de la PEA por estado...")

# Loop a traves de cada estado para obtener los datos
for id_estado, nombre_estado in estados_ids.items():
    # Construir la URL de la API para el estado actual
    url = (f"http://www.economia.gob.mx/datamexico/api/data?State={id_estado}"
           "&Economically+Active+Population=1&cube=inegi_enoe&drilldowns=State,Quarter"
           "&measures=Workforce&locale=es&parents=false")

    # Realizar la solicitud GET a la API
    response = requests.get(url)

    # Verificar si la solicitud fue exitosa
    if response.status_code == 200:
        data = response.json().get("data", [])

        # Procesar solo si se recibieron datos
        if data:
            # Crear un DataFrame temporal y anadirlo a la lista
            lista_df_pea.append(pd.DataFrame(data))
        else:
            print(f"Advertencia: No se encontraron datos para {nombre_estado} (ID: {id_estado})")
    else:
        # Informar si hubo un error en la solicitud
        print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Codigo: {response.status_code}")

# Concatenar todos los DataFrames de la lista en uno solo
df_pea_raw = pd.concat(lista_df_pea, ignore_index=True)

# Mostrar las primeras filas del DataFrame con los datos crudos
print("\n--- Datos Crudos de la PEA por Estado (Primeras 5 filas) ---")
print(df_pea_raw.head())

# Crear el directorio data/raw si no existe
import os
os.makedirs('data/raw', exist_ok=True)

# Guardar el DataFrame en un archivo CSV
df_pea_raw.to_csv('data/raw/pea_raw.csv', index=False)

print("\nDatos de la PEA guardados en 'data/raw/pea_raw.csv'")

# Lista para almacenar los DataFrames de cada ano
lista_df_gasto = []
anos = range(2013, 2024) # Abarca de 2013 a 2023

print("Iniciando la extraccion de datos del gasto publico ejecutado...")

# Loop a traves de cada ano para obtener los datos
for ano in anos:
    url = (f"http://www.economia.gob.mx/datamexico/api/data?cube=budget_transparency"
           f"&drilldowns=State,Functional+Group&measures=Amount+Executed&locale=es&Year={ano}")

    response = requests.get(url)

    if response.status_code == 200:
        data = response.json().get("data", [])
        if data:
            df_temp = pd.DataFrame(data)
            df_temp['Year'] = ano
            lista_df_gasto.append(df_temp)
        else:
            print(f"Advertencia: No se encontraron datos para el ano {ano}")
    else:
        print(f"Error al obtener datos del ano {ano}. Codigo: {response.status_code}")

if lista_df_gasto:
    # Concatenar todos los DataFrames en uno solo
    df_gasto_raw = pd.concat(lista_df_gasto, ignore_index=True)

    # Mostrar las primeras filas del DataFrame con los datos crudos
    print("\n--- Datos Crudos de Gasto Publico Ejecutado (Primeras 5 filas) ---")
    print(df_gasto_raw.head())

    # Crear el directorio data/raw si no existe
    import os
    os.makedirs('data/raw', exist_ok=True)

    # Guardar el DataFrame en un archivo CSV
    df_gasto_raw.to_csv('data/raw/gasto_raw.csv', index=False)

    print("\nDatos de Gasto guardados en 'data/raw/gasto_raw.csv'")
else:
    print("\nNo se pudieron obtener datos para generar el reporte.")

estados_ids = {
    1: 'Aguascalientes', 2: 'Baja California', 3: 'Baja California Sur',
    4: 'Campeche', 5: 'Coahuila de Zaragoza', 6: 'Colima',
    7: 'Chiapas', 8: 'Chihuahua', 9: 'Ciudad de México',
    10: 'Durango', 11: 'Guanajuato', 12: 'Guerrero',
    13: 'Hidalgo', 14: 'Jalisco', 15: 'México',
    16: 'Michoacán de Ocampo', 17: 'Morelos', 18: 'Nayarit',
    19: 'Nuevo León', 20: 'Oaxaca', 21: 'Puebla',
    22: 'Querétaro', 23: 'Quintana Roo', 24: 'San Luis Potosí',
    25: 'Sinaloa', 26: 'Sonora', 27: 'Tabasco',
    28: 'Tamaulipas', 29: 'Tlaxcala', 30: 'Veracruz de Ignacio de la Llave',
    31: 'Yucatán', 32: 'Zacatecas'
}

lista_df_remesas = []

print("Iniciando la extracción de datos crudos de Remesas por estado...")

# Loop a través de cada estado para obtener los datos
for id_estado, nombre_estado in estados_ids.items():
    # Construir la URL de la API para el estado actual
    # Usar la URL para obtener datos a nivel estatal
    url = (f"http://www.economia.gob.mx/datamexico/api/data.jsonrecords?State={id_estado}"
           "&cube=banxico_mun_income_remittances&drilldowns=State,Quarter"
           "&measures=Remittance+Amount&locale=es")

    response = requests.get(url)

    if response.status_code == 200:
        data = response.json().get("data", [])
        if data:
            lista_df_remesas.append(pd.DataFrame(data))
        else:
            print(f"Advertencia: No se encontraron datos para {nombre_estado} (ID: {id_estado})")
    else:
        print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Código: {response.status_code}")

if lista_df_remesas:
    # Concatenar todos los DataFrames en uno solo
    df_remesas_crudo = pd.concat(lista_df_remesas, ignore_index=True)

    # Seleccionar y reordenar las columnas de interes
    df_remesas_crudo = df_remesas_crudo[['State', 'Quarter', 'Remittance Amount']]

    # Mostrar las primeras filas del DataFrame con los datos crudos y unificados
    print("\n--- Datos Crudos de Remesas por Estado (Primeras 5 filas) ---")
    display(df_remesas_crudo.head())

    # Crear el directorio data/raw si no existe
    import os
    os.makedirs('data/raw', exist_ok=True)

    # Guardar el DataFrame en un archivo CSV
    df_remesas_crudo.to_csv('data/raw/remesas_raw.csv', index=False)

    print("\nDatos de Remesas guardados en 'data/raw/remesas_raw.csv'")

else:
    print("\nNo se pudieron obtener datos para generar el reporte.")

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

DATA_RAW_DIR = Path('data/raw')

def generar_log_descarga_variables_economicas():
    """Genera un archivo de texto con la descripción de las fuentes de datos económicas."""

    contenido_log = f"""
LOG DE DESCARGA DE DATOS ECONÓMICOS DEL PROYECTO
=================================================
Fecha de descarga: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Este archivo documenta las fuentes de datos utilizadas en el proyecto,
la fecha de su descarga y una breve descripción de su naturaleza.
---

### FUENTE 1: Inversión Extranjera Directa (IED) por Estado
- **Fuente Original**: API de DataMexico (Secretaría de Economía).
- **Descripción**: Datos trimestrales de inversión extranjera directa por entidad federativa. La IED es un indicador crucial del atractivo económico de cada estado y su capacidad para atraer capital internacional.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data
  - Cube: fdi_2_state_investment
  - Drilldowns: Quarter, State
  - Medida: Investment
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32)
- **Archivo Generado**: data/raw/ied_raw.csv
---

### FUENTE 2: Salario Mensual por Estado
- **Fuente Original**: API de DataMexico - INEGI ENOE (Encuesta Nacional de Ocupación y Empleo).
- **Descripción**: Datos trimestrales del salario mensual promedio y tamaño de la fuerza laboral por entidad federativa. Proporciona información sobre el nivel de ingresos y la población económicamente activa en cada estado.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data
  - Cube: inegi_enoe
  - Drilldowns: State, Quarter
  - Medidas: Monthly Wage, Workforce
  - Filtro: Population Classification = 1
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32)
- **Archivo Generado**: data/raw/salario_raw.csv
---

### FUENTE 3: Población Económicamente Activa (PEA) por Estado
- **Fuente Original**: API de DataMexico - INEGI ENOE.
- **Descripción**: Datos trimestrales de la población económicamente activa (PEA) por estado. La PEA es el total de personas que están trabajando o buscando trabajo, siendo un indicador clave del mercado laboral.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data
  - Cube: inegi_enoe
  - Drilldowns: State, Quarter
  - Medida: Workforce
  - Filtro: Economically Active Population = 1
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32)
- **Archivo Generado**: data/raw/pea_raw.csv
---

### FUENTE 4: Gasto Público Ejecutado por Estado
- **Fuente Original**: API de DataMexico - Presupuestos de Egresos (Transparencia Presupuestaria).
- **Descripción**: Datos anuales del gasto público ejecutado por entidad federativa, desglosado por grupo funcional. Refleja la inversión y gasto del gobierno en cada estado.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data
  - Cube: budget_transparency
  - Drilldowns: State, Functional Group
  - Medida: Amount Executed
  - Rango de Años: 2013-2023
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32), años 2013 a 2023
- **Archivo Generado**: data/raw/gasto_raw.csv
---

### FUENTE 5: Remesas por Estado
- **Fuente Original**: API de DataMexico - Banco de México (Banxico).
- **Descripción**: Datos trimestrales de remesas (transferencias de dinero) que llegan a cada entidad federativa desde el extranjero. Las remesas son una fuente importante de ingreso para muchas regiones de México.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data.jsonrecords
  - Cube: banxico_mun_income_remittances
  - Drilldowns: State, Quarter
  - Medida: Remittance Amount
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32)
- **Archivo Generado**: data/raw/remesas_raw.csv
---

### NOTAS GENERALES:
- **Plataforma de Datos**: Todos los datos provienen de la plataforma DataMexico de la Secretaría de Economía del Gobierno de México.
- **Formato de Respuesta**: JSON convertido a DataFrames de pandas
- **Codificación**: UTF-8
- **Manejo de Errores**: Se registran advertencias y errores por estado en caso de que la API no retorne datos o falle la conexión.
- **Localización**: Todos los datos fueron consultados con locale='es' (español).

---
Generado automáticamente por: importacion_variables_economicas.py
"""

    ruta_log = DATA_RAW_DIR / "log_descarga.txt"

    try:
        # Crear directorio si no existe
        DATA_RAW_DIR.mkdir(parents=True, exist_ok=True)

        # Escribir el archivo de log
        with open(ruta_log, "w", encoding="utf-8") as f:
            f.write(contenido_log)

        logging.info(f"✓ Archivo de log de descargas generado exitosamente en: {ruta_log}")
        return True

    except Exception as e:
        logging.error(f"✗ No se pudo crear el archivo de log: {e}")
        return False


# Ejecutar la función
if __name__ == "__main__":
    generar_log_descarga_variables_economicas()