# -*- coding: utf-8 -*-
"""importacion_variables_economicas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yw6w-A_kHeGTaOIQ4ZsDJl8UKNVLUIL0
"""

import requests
import pandas as pd
import matplotlib.pyplot as plt

estados_ids = {
    1: 'Aguascalientes', 2: 'Baja California', 3: 'Baja California Sur',
    4: 'Campeche', 5: 'Coahuila de Zaragoza', 6: 'Colima',
    7: 'Chiapas', 8: 'Chihuahua', 9: 'Ciudad de México',
    10: 'Durango', 11: 'Guanajuato', 12: 'Guerrero',
    13: 'Hidalgo', 14: 'Jalisco', 15: 'México',
    16: 'Michoacán de Ocampo', 17: 'Morelos', 18: 'Nayarit',
    19: 'Nuevo León', 20: 'Oaxaca', 21: 'Puebla',
    22: 'Querétaro', 23: 'Quintana Roo', 24: 'San Luis Potosí',
    25: 'Sinaloa', 26: 'Sonora', 27: 'Tabasco',
    28: 'Tamaulipas', 29: 'Tlaxcala', 30: 'Veracruz de Ignacio de la Llave',
    31: 'Yucatán', 32: 'Zacatecas'
}

# Lista para almacenar los DataFrames de cada estado
lista_df_ied = []

print("Iniciando la extraccion de datos crudos de IED por estado...")

# Loop a traves de cada estado para obtener los datos
for id_estado, nombre_estado in estados_ids.items():
    url = (f"http://www.economia.gob.mx/datamexico/api/data?State={id_estado}"
           "&cube=fdi_2_state_investment&drilldowns=Quarter,State&locale=es"
           "&measures=Investment&parents=false")
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json().get("data", [])
        if data:
            lista_df_ied.append(pd.DataFrame(data))
    else:
        print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Codigo: {response.status_code}")

# Concatenar todos los DataFrames
df_ied_raw = pd.concat(lista_df_ied, ignore_index=True)

# Mostrar las primeras filas del DataFrame con los datos crudos
print("\n--- Datos Crudos de Inversion Extranjera Directa por Estado (Primeras 5 filas) ---")
print(df_ied_raw.head())

# Crear el directorio data/raw si no existe
import os
os.makedirs('data/raw', exist_ok=True)

# Guardar el DataFrame en un archivo CSV
df_ied_raw.to_csv('data/raw/ied_raw.csv', index=False)

print("\nDatos de IED guardados en 'data/raw/ied_raw.csv'")

# Lista para almacenar los DataFrames de cada estado
lista_df_salario = []

print("Iniciando la extraccion de datos de salario mensual por estado...")

# Loop a traves de cada estado para obtener los datos
for id_estado, nombre_estado in estados_ids.items():
    # Construir la URL de la API para el estado actual
    url = (f"http://www.economia.gob.mx/datamexico/api/data?State={id_estado}"
           "&Population+Classification=1&cube=inegi_enoe&drilldowns=State,Quarter"
           "&measures=Monthly+Wage,Workforce&locale=es&parents=false")

    # Realizar la solicitud GET a la API
    response = requests.get(url)

    # Verificar si la solicitud fue exitosa
    if response.status_code == 200:
        data = response.json().get("data", [])

        # Procesar solo si se recibieron datos
        if data:
            # Crear un DataFrame temporal y anadirlo a la lista
            lista_df_salario.append(pd.DataFrame(data))
        else:
            print(f"Advertencia: No se encontraron datos para {nombre_estado} (ID: {id_estado})")
    else:
        # Informar si hubo un error en la solicitud
        print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Codigo: {response.status_code}")

# Concatenar todos los DataFrames de la lista en uno solo
df_salario_raw = pd.concat(lista_df_salario, ignore_index=True)

# Mostrar las primeras filas del DataFrame con los datos crudos
print("\n--- Datos Crudos de Salario Mensual por Estado (Primeras 5 filas) ---")
print(df_salario_raw.head())

# Crear el directorio data/raw si no existe
import os
os.makedirs('data/raw', exist_ok=True)

# Guardar el DataFrame en un archivo CSV
df_salario_raw.to_csv('data/raw/salario_raw.csv', index=False)

print("\nDatos de Salario guardados en 'data/raw/salario_raw.csv'")

# Lista para almacenar los DataFrames de cada estado
lista_df_pea = []

print("Iniciando la extraccion de datos de la PEA por estado...")

# Loop a traves de cada estado para obtener los datos
for id_estado, nombre_estado in estados_ids.items():
    # Construir la URL de la API para el estado actual
    url = (f"http://www.economia.gob.mx/datamexico/api/data?State={id_estado}"
           "&Economically+Active+Population=1&cube=inegi_enoe&drilldowns=State,Quarter"
           "&measures=Workforce&locale=es&parents=false")

    # Realizar la solicitud GET a la API
    response = requests.get(url)

    # Verificar si la solicitud fue exitosa
    if response.status_code == 200:
        data = response.json().get("data", [])

        # Procesar solo si se recibieron datos
        if data:
            # Crear un DataFrame temporal y anadirlo a la lista
            lista_df_pea.append(pd.DataFrame(data))
        else:
            print(f"Advertencia: No se encontraron datos para {nombre_estado} (ID: {id_estado})")
    else:
        # Informar si hubo un error en la solicitud
        print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Codigo: {response.status_code}")

# Concatenar todos los DataFrames de la lista en uno solo
df_pea_raw = pd.concat(lista_df_pea, ignore_index=True)

# Mostrar las primeras filas del DataFrame con los datos crudos
print("\n--- Datos Crudos de la PEA por Estado (Primeras 5 filas) ---")
print(df_pea_raw.head())

# Crear el directorio data/raw si no existe
import os
os.makedirs('data/raw', exist_ok=True)

# Guardar el DataFrame en un archivo CSV
df_pea_raw.to_csv('data/raw/pea_raw.csv', index=False)

print("\nDatos de la PEA guardados en 'data/raw/pea_raw.csv'")

# Lista para almacenar los DataFrames de cada ano
lista_df_gasto = []
anos = range(2013, 2024) # Abarca de 2013 a 2023

print("Iniciando la extraccion de datos del gasto publico ejecutado...")

# Loop a traves de cada ano para obtener los datos
for ano in anos:
    url = (f"http://www.economia.gob.mx/datamexico/api/data?cube=budget_transparency"
           f"&drilldowns=State,Functional+Group&measures=Amount+Executed&locale=es&Year={ano}")

    response = requests.get(url)

    if response.status_code == 200:
        data = response.json().get("data", [])
        if data:
            df_temp = pd.DataFrame(data)
            df_temp['Year'] = ano
            lista_df_gasto.append(df_temp)
        else:
            print(f"Advertencia: No se encontraron datos para el ano {ano}")
    else:
        print(f"Error al obtener datos del ano {ano}. Codigo: {response.status_code}")

if lista_df_gasto:
    # Concatenar todos los DataFrames en uno solo
    df_gasto_raw = pd.concat(lista_df_gasto, ignore_index=True)

    # Mostrar las primeras filas del DataFrame con los datos crudos
    print("\n--- Datos Crudos de Gasto Publico Ejecutado (Primeras 5 filas) ---")
    print(df_gasto_raw.head())

    # Crear el directorio data/raw si no existe
    import os
    os.makedirs('data/raw', exist_ok=True)

    # Guardar el DataFrame en un archivo CSV
    df_gasto_raw.to_csv('data/raw/gasto_raw.csv', index=False)

    print("\nDatos de Gasto guardados en 'data/raw/gasto_raw.csv'")
else:
    print("\nNo se pudieron obtener datos para generar el reporte.")

estados_ids = {
    1: 'Aguascalientes', 2: 'Baja California', 3: 'Baja California Sur',
    4: 'Campeche', 5: 'Coahuila de Zaragoza', 6: 'Colima',
    7: 'Chiapas', 8: 'Chihuahua', 9: 'Ciudad de México',
    10: 'Durango', 11: 'Guanajuato', 12: 'Guerrero',
    13: 'Hidalgo', 14: 'Jalisco', 15: 'México',
    16: 'Michoacán de Ocampo', 17: 'Morelos', 18: 'Nayarit',
    19: 'Nuevo León', 20: 'Oaxaca', 21: 'Puebla',
    22: 'Querétaro', 23: 'Quintana Roo', 24: 'San Luis Potosí',
    25: 'Sinaloa', 26: 'Sonora', 27: 'Tabasco',
    28: 'Tamaulipas', 29: 'Tlaxcala', 30: 'Veracruz de Ignacio de la Llave',
    31: 'Yucatán', 32: 'Zacatecas'
}

lista_df_remesas = []

print("Iniciando la extracción de datos crudos de Remesas por estado...")

# Loop a través de cada estado para obtener los datos
for id_estado, nombre_estado in estados_ids.items():
    # Construir la URL de la API para el estado actual
    # Usar la URL para obtener datos a nivel estatal
    url = (f"http://www.economia.gob.mx/datamexico/api/data.jsonrecords?State={id_estado}"
           "&cube=banxico_mun_income_remittances&drilldowns=State,Quarter"
           "&measures=Remittance+Amount&locale=es")

    response = requests.get(url)

    if response.status_code == 200:
        data = response.json().get("data", [])
        if data:
            lista_df_remesas.append(pd.DataFrame(data))
        else:
            print(f"Advertencia: No se encontraron datos para {nombre_estado} (ID: {id_estado})")
    else:
        print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Código: {response.status_code}")

if lista_df_remesas:
    # Concatenar todos los DataFrames en uno solo
    df_remesas_crudo = pd.concat(lista_df_remesas, ignore_index=True)

    # Seleccionar y reordenar las columnas de interes
    df_remesas_crudo = df_remesas_crudo[['State', 'Quarter', 'Remittance Amount']]

    # Mostrar las primeras filas del DataFrame con los datos crudos y unificados
    print("\n--- Datos Crudos de Remesas por Estado (Primeras 5 filas) ---")
    display(df_remesas_crudo.head())

    # Crear el directorio data/raw si no existe
    import os
    os.makedirs('data/raw', exist_ok=True)

    # Guardar el DataFrame en un archivo CSV
    df_remesas_crudo.to_csv('data/raw/remesas_raw.csv', index=False)

    print("\nDatos de Remesas guardados en 'data/raw/remesas_raw.csv'")

else:
    print("\nNo se pudieron obtener datos para generar el reporte.")