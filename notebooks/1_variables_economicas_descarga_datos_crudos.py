# -*- coding: utf-8 -*-
"""descarga_datos_crudos_variables_economicas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_XL_jPtuFLsduqxRcIpBIPDWznaoQR2x
"""

import requests
import json
import csv
import logging
from datetime import datetime
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

DATA_RAW_DIR = Path('data/raw')

estados_ids = {
    1: 'Aguascalientes', 2: 'Baja California', 3: 'Baja California Sur',
    4: 'Campeche', 5: 'Coahuila de Zaragoza', 6: 'Colima',
    7: 'Chiapas', 8: 'Chihuahua', 9: 'Ciudad de México',
    10: 'Durango', 11: 'Guanajuato', 12: 'Guerrero',
    13: 'Hidalgo', 14: 'Jalisco', 15: 'México',
    16: 'Michoacán de Ocampo', 17: 'Morelos', 18: 'Nayarit',
    19: 'Nuevo León', 20: 'Oaxaca', 21: 'Puebla',
    22: 'Querétaro', 23: 'Quintana Roo', 24: 'San Luis Potosí',
    25: 'Sinaloa', 26: 'Sonora', 27: 'Tabasco',
    28: 'Tamaulipas', 29: 'Tlaxcala', 30: 'Veracruz de Ignacio de la Llave',
    31: 'Yucatán', 32: 'Zacatecas'
}


def guardar_json_a_csv(datos_lista, archivo_salida):
    """
    Convierte una lista de diccionarios JSON a CSV.

    Args:
        datos_lista: Lista de diccionarios (datos crudos de la API)
        archivo_salida: Ruta del archivo CSV de salida
    """
    if not datos_lista:
        return False

    # Obtener las claves del primer diccionario como encabezados
    fieldnames = datos_lista[0].keys()

    try:
        with open(archivo_salida, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(datos_lista)
        return True
    except Exception as e:
        logging.error(f"Error al guardar CSV: {e}")
        return False


def mostrar_primeras_filas(datos_lista, num_filas=5):
    """Muestra las primeras filas de los datos descargados."""
    if not datos_lista:
        print("No hay datos para mostrar")
        return

    for i, fila in enumerate(datos_lista[:num_filas]):
        print(f"Fila {i+1}: {fila}")


def descargar_ied():
    """Descarga datos crudos de Inversion Extranjera Directa por estado."""
    print("Iniciando la extraccion de datos crudos de IED por estado...")

    datos_totales = []

    for id_estado, nombre_estado in estados_ids.items():
        url = (f"http://www.economia.gob.mx/datamexico/api/data?State={id_estado}"
               "&cube=fdi_2_state_investment&drilldowns=Quarter,State&locale=es"
               "&measures=Investment&parents=false")

        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json().get("data", [])
                if data:
                    datos_totales.extend(data)
            else:
                print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Codigo: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"Error de conexion para {nombre_estado} (ID: {id_estado}): {e}")

    if datos_totales:
        print("\n--- Datos Crudos de Inversion Extranjera Directa por Estado (Primeras 5 filas) ---")
        mostrar_primeras_filas(datos_totales, 5)

        DATA_RAW_DIR.mkdir(parents=True, exist_ok=True)
        if guardar_json_a_csv(datos_totales, 'data/raw/ied_raw.csv'):
            print("\nDatos de IED guardados en 'data/raw/ied_raw.csv'")
            logging.info("✓ Datos de IED descargados exitosamente")
        else:
            logging.error("✗ Error al guardar datos de IED")
    else:
        logging.warning("No se pudieron obtener datos de IED")


def descargar_salario():
    """Descarga datos crudos de salario mensual por estado."""
    print("Iniciando la extraccion de datos de salario mensual por estado...")

    datos_totales = []

    for id_estado, nombre_estado in estados_ids.items():
        url = (f"http://www.economia.gob.mx/datamexico/api/data?State={id_estado}"
               "&Population+Classification=1&cube=inegi_enoe&drilldowns=State,Quarter"
               "&measures=Monthly+Wage,Workforce&locale=es&parents=false")

        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json().get("data", [])
                if data:
                    datos_totales.extend(data)
                else:
                    print(f"Advertencia: No se encontraron datos para {nombre_estado} (ID: {id_estado})")
            else:
                print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Codigo: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"Error de conexion para {nombre_estado} (ID: {id_estado}): {e}")

    if datos_totales:
        print("\n--- Datos Crudos de Salario Mensual por Estado (Primeras 5 filas) ---")
        mostrar_primeras_filas(datos_totales, 5)

        DATA_RAW_DIR.mkdir(parents=True, exist_ok=True)
        if guardar_json_a_csv(datos_totales, 'data/raw/salario_raw.csv'):
            print("\nDatos de Salario guardados en 'data/raw/salario_raw.csv'")
            logging.info("✓ Datos de Salario descargados exitosamente")
        else:
            logging.error("✗ Error al guardar datos de Salario")
    else:
        logging.warning("No se pudieron obtener datos de Salario")


def descargar_pea():
    """Descarga datos crudos de Poblacion Economicamente Activa por estado."""
    print("Iniciando la extraccion de datos de la PEA por estado...")

    datos_totales = []

    for id_estado, nombre_estado in estados_ids.items():
        url = (f"http://www.economia.gob.mx/datamexico/api/data?State={id_estado}"
               "&Economically+Active+Population=1&cube=inegi_enoe&drilldowns=State,Quarter"
               "&measures=Workforce&locale=es&parents=false")

        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json().get("data", [])
                if data:
                    datos_totales.extend(data)
                else:
                    print(f"Advertencia: No se encontraron datos para {nombre_estado} (ID: {id_estado})")
            else:
                print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Codigo: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"Error de conexion para {nombre_estado} (ID: {id_estado}): {e}")

    if datos_totales:
        print("\n--- Datos Crudos de la PEA por Estado (Primeras 5 filas) ---")
        mostrar_primeras_filas(datos_totales, 5)

        DATA_RAW_DIR.mkdir(parents=True, exist_ok=True)
        if guardar_json_a_csv(datos_totales, 'data/raw/pea_raw.csv'):
            print("\nDatos de la PEA guardados en 'data/raw/pea_raw.csv'")
            logging.info("✓ Datos de PEA descargados exitosamente")
        else:
            logging.error("✗ Error al guardar datos de PEA")
    else:
        logging.warning("No se pudieron obtener datos de PEA")


def descargar_gasto():
    """Descarga datos crudos de gasto publico ejecutado."""
    print("Iniciando la extraccion de datos del gasto publico ejecutado...")

    datos_totales = []
    anos = range(2013, 2024)

    for ano in anos:
        url = (f"http://www.economia.gob.mx/datamexico/api/data?cube=budget_transparency"
               f"&drilldowns=State,Functional+Group&measures=Amount+Executed&locale=es&Year={ano}")

        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json().get("data", [])
                if data:
                    for item in data:
                        item['Year'] = ano
                    datos_totales.extend(data)
                else:
                    print(f"Advertencia: No se encontraron datos para el ano {ano}")
            else:
                print(f"Error al obtener datos del ano {ano}. Codigo: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"Error de conexion para el ano {ano}: {e}")

    if datos_totales:
        print("\n--- Datos Crudos de Gasto Publico Ejecutado (Primeras 5 filas) ---")
        mostrar_primeras_filas(datos_totales, 5)

        DATA_RAW_DIR.mkdir(parents=True, exist_ok=True)
        if guardar_json_a_csv(datos_totales, 'data/raw/gasto_raw.csv'):
            print("\nDatos de Gasto guardados en 'data/raw/gasto_raw.csv'")
            logging.info("✓ Datos de Gasto descargados exitosamente")
        else:
            logging.error("✗ Error al guardar datos de Gasto")
    else:
        logging.warning("No se pudieron obtener datos de Gasto")


def descargar_remesas():
    """Descarga datos crudos de remesas por estado."""
    print("Iniciando la extraccion de datos crudos de Remesas por estado...")

    datos_totales = []

    for id_estado, nombre_estado in estados_ids.items():
        url = (f"http://www.economia.gob.mx/datamexico/api/data.jsonrecords?State={id_estado}"
               "&cube=banxico_mun_income_remittances&drilldowns=State,Quarter"
               "&measures=Remittance+Amount&locale=es")

        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json().get("data", [])
                if data:
                    datos_totales.extend(data)
                else:
                    print(f"Advertencia: No se encontraron datos para {nombre_estado} (ID: {id_estado})")
            else:
                print(f"Error al obtener datos de {nombre_estado} (ID: {id_estado}). Código: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"Error de conexion para {nombre_estado} (ID: {id_estado}): {e}")

    if datos_totales:
        print("\n--- Datos Crudos de Remesas por Estado (Primeras 5 filas) ---")
        mostrar_primeras_filas(datos_totales, 5)

        DATA_RAW_DIR.mkdir(parents=True, exist_ok=True)
        if guardar_json_a_csv(datos_totales, 'data/raw/remesas_raw.csv'):
            print("\nDatos de Remesas guardados en 'data/raw/remesas_raw.csv'")
            logging.info("✓ Datos de Remesas descargados exitosamente")
        else:
            logging.error("✗ Error al guardar datos de Remesas")
    else:
        logging.warning("No se pudieron obtener datos de Remesas")


def generar_log_descarga_variables_economicas():
    """Genera un archivo de texto con la descripcion de las fuentes de datos economicas."""

    contenido_log = f"""
LOG DE DESCARGA DE DATOS ECONÓMICOS DEL PROYECTO
=================================================
Fecha de descarga: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Este archivo documenta las fuentes de datos utilizadas en el proyecto,
la fecha de su descarga y una breve descripción de su naturaleza.
---

### FUENTE 1: Inversión Extranjera Directa (IED) por Estado
- **Fuente Original**: API de DataMexico (Secretaría de Economía).
- **Descripción**: Datos trimestrales de inversión extranjera directa por entidad federativa. La IED es un indicador crucial del atractivo económico de cada estado y su capacidad para atraer capital internacional.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data
  - Cube: fdi_2_state_investment
  - Drilldowns: Quarter, State
  - Medida: Investment
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32)
- **Archivo Generado**: data/raw/ied_raw.csv
---

### FUENTE 2: Salario Mensual por Estado
- **Fuente Original**: API de DataMexico - INEGI ENOE (Encuesta Nacional de Ocupación y Empleo).
- **Descripción**: Datos trimestrales del salario mensual promedio y tamaño de la fuerza laboral por entidad federativa. Proporciona información sobre el nivel de ingresos y la población económicamente activa en cada estado.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data
  - Cube: inegi_enoe
  - Drilldowns: State, Quarter
  - Medidas: Monthly Wage, Workforce
  - Filtro: Population Classification = 1
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32)
- **Archivo Generado**: data/raw/salario_raw.csv
---

### FUENTE 3: Población Económicamente Activa (PEA) por Estado
- **Fuente Original**: API de DataMexico - INEGI ENOE.
- **Descripción**: Datos trimestrales de la población económicamente activa (PEA) por estado. La PEA es el total de personas que están trabajando o buscando trabajo, siendo un indicador clave del mercado laboral.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data
  - Cube: inegi_enoe
  - Drilldowns: State, Quarter
  - Medida: Workforce
  - Filtro: Economically Active Population = 1
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32)
- **Archivo Generado**: data/raw/pea_raw.csv
---

### FUENTE 4: Gasto Público Ejecutado por Estado
- **Fuente Original**: API de DataMexico - Presupuestos de Egresos (Transparencia Presupuestaria).
- **Descripción**: Datos anuales del gasto público ejecutado por entidad federativa, desglosado por grupo funcional. Refleja la inversión y gasto del gobierno en cada estado.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data
  - Cube: budget_transparency
  - Drilldowns: State, Functional Group
  - Medida: Amount Executed
  - Rango de Años: 2013-2023
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32), años 2013 a 2023
- **Archivo Generado**: data/raw/gasto_raw.csv
---

### FUENTE 5: Remesas por Estado
- **Fuente Original**: API de DataMexico - Banco de México (Banxico).
- **Descripción**: Datos trimestrales de remesas (transferencias de dinero) que llegan a cada entidad federativa desde el extranjero. Las remesas son una fuente importante de ingreso para muchas regiones de México.
- **Parámetros de Consulta**:
  - Endpoint: /datamexico/api/data.jsonrecords
  - Cube: banxico_mun_income_remittances
  - Drilldowns: State, Quarter
  - Medida: Remittance Amount
- **Enlace de la Fuente**: https://www.economia.gob.mx/datamexico/
- **Rango de Datos**: Todos los estados (ID: 1-32)
- **Archivo Generado**: data/raw/remesas_raw.csv
---

### NOTAS GENERALES:
- **Plataforma de Datos**: Todos los datos provienen de la plataforma DataMexico de la Secretaría de Economía del Gobierno de México.
- **Formato de Respuesta**: JSON convertido a CSV
- **Codificación**: UTF-8
- **Manejo de Errores**: Se registran advertencias y errores por estado en caso de que la API no retorne datos o falle la conexión.
- **Localización**: Todos los datos fueron consultados con locale='es' (español).
- **Librerías Utilizadas**: Solo requests (descarga HTTP) y librería estándar de Python

---
Generado automáticamente por: descarga_datos_crudos.py
"""

    ruta_log = DATA_RAW_DIR / "log_descarga.txt"

    try:
        DATA_RAW_DIR.mkdir(parents=True, exist_ok=True)
        with open(ruta_log, "w", encoding="utf-8") as f:
            f.write(contenido_log)
        logging.info(f"✓ Archivo de log de descargas generado exitosamente en: {ruta_log}")
        return True
    except Exception as e:
        logging.error(f"✗ No se pudo crear el archivo de log: {e}")
        return False


if __name__ == "__main__":
    print("=" * 70)
    print("DESCARGA DE DATOS CRUDOS - VARIABLES ECONOMICAS")
    print("=" * 70)

    descargar_ied()
    print("\n" + "-" * 70 + "\n")

    descargar_salario()
    print("\n" + "-" * 70 + "\n")

    descargar_pea()
    print("\n" + "-" * 70 + "\n")

    descargar_gasto()
    print("\n" + "-" * 70 + "\n")

    descargar_remesas()
    print("\n" + "-" * 70 + "\n")

    generar_log_descarga_variables_economicas()

    print("\n" + "=" * 70)
    print("DESCARGA COMPLETADA")
    print("=" * 70)